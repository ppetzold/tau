// generate the first 64 bits of fractional part of the log of 256 primes
// starting from 3. is not part of the buildchain (but pre-gen) so not to
// require mpfr in order to build the project. logprimes.h can be generated by:
// g++ lpgen.cpp -lmpfr && ./a.out > logprimes.h

#include <mpreal.h>
#include <cmath>
using namespace mpfr;
typedef uint64_t nat;
bool isprime(nat n) {
	if (n<1) return false;
	if (n==2) return true;
	nat k = ::ceil(::sqrt(n));
	while (k > 1) if (!(n%k--)) return false;
	return true;
}
nat fpl(mpreal x) {
	mpreal l = log2(x), f = l - floor(l);
	f *= (1<<15); f *= (1<<15); f *= (1<<15);
	f *= (1<<15); f *= (1<<4);
	return (nat)ceil(f);
}
int main() {
	mpreal::set_default_prec(128);
	std::cout<<"// this is an automatically generated file"<<std::endl;
	std::cout<<"const uint64_t logprimes[256] = {";
	for (nat n = 3, k = 0;k < 256;++n)
		if (isprime(n))
			if (++k < 256)
				std::cout<<fpl(n)<<"U,";
			else {
				std::cout<<fpl(n)<<"U};"<<std::endl;
				return 0;
			}
	return 0;
}
